service: users
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name


frameworkVersion: '2'

provider:
  name: aws
  runtime: go1.x
  stage: ${opt:stage, 'dev'}
  region: ${self:provider.environment.USERS_AWS_REGION}
  environment:
    USERS_AWS_DYNAMODB_TABLE_USER: ${env:USERS_AWS_DYNAMODB_TABLE_USER}
    USERS_AWS_REGION: ${env:USERS_AWS_REGION}
    USERS_EMAIL_SENDER: ${env:USERS_EMAIL_SENDER}
    USERS_EMAIL_ACTIVATE_URL: { "Fn::Join" : ["", [{ "Ref" : "ApiGatewayRestApi" }, ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/users/activate" ] ]  }
    USERS_LOG_LEVEL: ${env:USERS_LOG_LEVEL}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:PutItem
      Resource:
        - Fn::GetAtt: [userTable, Arn]
    - Effect: "Allow"
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "*"


resources:
  Resources:
    userTable:
      Type: AWS::DynamoDB::Table
      # DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.USERS_AWS_DYNAMODB_TABLE_USER}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        # GlobalSecondaryIndexes:
          # - IndexName: IdIndex
            # KeySchema:
              # - AttributeName: Id
                # KeyType: HASH
            # Projection:
              # ProjectionType: ALL
            # ProvisionedThroughput:
              # ReadCapacityUnits: 1
              # WriteCapacityUnits: 1

package:
  exclude:
    - ./**
  include:
    - ./bin/**
functions:
 createUser:
   handler: bin/createUser
   events:
     - http:
         path: /users/create
         method: post
 notifyUser:
   handler: bin/notifyUser
   events:
    - stream:
        type: dynamodb
        arn:
          Fn::GetAtt: [userTable, StreamArn]
 activeUser:
   handler: bin/activateUser
   events:
     - http:
         path: /users/activate
         method: get
