# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: users
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: go1.x
  environment:
    USERS_AWS_DYNAMODB_TABLE_USER: ${env:USERS_AWS_DYNAMODB_TABLE_USER}
    USERS_AWS_REGION: ${env:USERS_AWS_REGION}
    USERS_EMAIL_SENDER: ${env:USERS_EMAIL_SENDER}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Scan
        - dynamodb:UpdateItem
        - dynamodb:PutItem
#        - ses:SendMail
      Resource: "arn:aws:dynamodb:*:*:table/${self:provider.environment.USERS_AWS_DYNAMODB_TABLE_USER}"
#      Condition:
#        StringEquals:
#          ses:FromAddress:
#            - "${self:provider.environment.USERS_EMAIL_SENDER}"


# you can overwrite defaults here
#  stage: dev
  region: us-west-2

resources:
  Resources:
    userTable:

      Type: AWS::DynamoDB::Table
      # DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.USERS_AWS_DYNAMODB_TABLE_USER}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        # GlobalSecondaryIndexes:
          # - IndexName: IdIndex
            # KeySchema:
              # - AttributeName: Id
                # KeyType: HASH
            # Projection:
              # ProjectionType: ALL
            # ProvisionedThroughput:
              # ReadCapacityUnits: 1
              # WriteCapacityUnits: 1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1


############################################
# default template
############################################
package:
  exclude:
    - ./**
  include:
    - ./bin/**
functions:
 createUser:
   handler: bin/createUser
   events:
     - http:
         path: /users/create
         method: post
 notifyUser:
   handler: bin/notifyUser
   events:
    - stream:
        type: dynamodb
        arn:
          Fn::GetAtt: [userTable, StreamArn]
# not found
#     - stream: arn:aws:dynamodb:us-west-2:#{AWS.AccountId}:table/${self:provider.environment.USERS_AWS_DYNAMODB_TABLE_USER}/stream/2020-12-09T16:40:37.833

####   users:
####     handler: bin/users
####     events:
####       - http:
####           path: users
####           method: get

#  hello:
#    handler: bin/hello
#    events:
#      - http:
#          path: hello
#          method: get
#   world:
#     handler: bin/world
#     events:
#       - http:
#           path: world
#           method: get


############################################
# default template
############################################
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
